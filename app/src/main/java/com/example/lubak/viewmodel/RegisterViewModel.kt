package com.example.lubak.viewmodel

import android.os.Build
import android.util.Log
import androidx.annotation.RequiresApi
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.lubak.api.RetrofitClient

import com.example.lubak.model.RegisterResponse
import com.example.lubak.model.UploadResponse
import com.example.lubak.model.User
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import retrofit2.Call
import retrofit2.Response
import java.time.LocalDateTime

class RegisterViewModel : ViewModel() {

    var email by mutableStateOf("")
    var username by mutableStateOf("")
    var firstName by mutableStateOf("")
    var lastName by mutableStateOf("")
    var password by mutableStateOf("")
    var confirmPassword by mutableStateOf("")
    var passwordVisible by mutableStateOf(false)
    private val apiService = RetrofitClient.instance
    var registrationResult by mutableStateOf<RegisterResponse?>(null)
    var isLoading by mutableStateOf(false)

    fun onEmailChange(newEmail: String) {
        email = newEmail
    }

    fun onUsernameChange(newUsername: String) {
        username = newUsername
    }

    fun onFirstNameChange(newFirstName: String) {
        firstName = newFirstName
    }

    fun onLastNameChange(newLastName: String) {
        lastName = newLastName
    }

    fun onPasswordChange(newPassword: String) {
        password = newPassword
    }

    fun onConfirmPasswordChange(newConfirmPassword: String) {
        confirmPassword = newConfirmPassword
    }

    fun onPasswordVisibilityToggle() {
        passwordVisible = !passwordVisible
    }

    @RequiresApi(Build.VERSION_CODES.O)
    fun register() {
        // Start loading state
        isLoading = true

        // Create the User object from the current state
        val user = User(
            id = 0, // Assuming the ID is generated by the server
            email = email,
            password = password,
            userName = username,
            firstName = firstName,
            lastName = lastName,
            createdAt = null // Automatically sets to the current time
        )

        viewModelScope.launch {
            try {
                // Make the network request in the IO thread
                val response = withContext(Dispatchers.IO) {
                    apiService.registerUser(user).execute()
                }

                // Handle the response
                if (response.isSuccessful) {
                    registrationResult = RegisterResponse(success = true, message = "User registered successfully.")
                    Log.d("RegisterViewModel", "Registration successful: ${response.body()}")
                } else {
                    registrationResult = RegisterResponse(success = false, message = "Registration failed with code: ${response.code()}")
                    Log.e("RegisterViewModel", "Registration failed: ${response.errorBody()?.string()}")
                }
            } catch (e: Exception) {
                registrationResult = RegisterResponse(success = false, message = "Error registering user: ${e.message}")
                Log.e("RegisterViewModel", "Exception during registration", e)
            } finally {
                // Stop loading state
                isLoading = false
            }
        }
    }
}
